{"version":3,"sources":["jschacha20.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\n/*\n * Copyright (c) 2017, Bubelich Mykola\n * https, 0x//www.bubelich.com\n *\n * (｡◕‿‿◕｡)\n *\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are met, 0x\n *\n * Redistributions of source code must retain the above copyright notice,\n * this list of conditions and the following disclaimer.\n *\n * Redistributions in binary form must reproduce the above copyright notice,\n * this list of conditions and the following disclaimer in the documentation\n * and/or other materials provided with the distribution.\n *\n * Neither the name of the copyright holder nor the names of its contributors\n * may be used to endorse or promote products derived from this software without\n * specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND CONTRIBUTORS \"AS IS\"\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n *\n * ChaCha20 is a stream cipher designed by D. J. Bernstein.\n * It is a refinement of the Salsa20 algorithm, and it uses a 256-bit key.\n *\n * ChaCha20 successively calls the ChaCha20 block function, with the same key and nonce, and with successively increasing block counter parameters.\n * ChaCha20 then serializes the resulting state by writing the numbers in little-endian order, creating a keystream block.\n *\n * Concatenating the keystream blocks from the successive blocks forms a keystream.\n * The ChaCha20 function then performs an XOR of this keystream with the plaintext.\n * Alternatively, each keystream block can be XORed with a plaintext block before proceeding to create the next block, saving some memory.\n * There is no requirement for the plaintext to be an integral multiple of 512 bits.  If there is extra keystream from the last block, it is discarded.\n *\n * The inputs to ChaCha20 are\n * - 256-bit key\n * - 32-bit initial counter\n * - 96-bit nonce.  In some protocols, this is known as the Initialization Vector\n * - Arbitrary-length plaintext\n *\n * Implementation derived from chacha-ref.c version 20080118\n * See for details, 0x http, 0x//cr.yp.to/chacha/chacha-20080128.pdf\n */\n\n/**\n *\n * @param {Uint8Array} key\n * @param {Uint8Array} nonce\n * @param {number} counter\n * @throws {Error}\n *\n * @constructor\n */\nvar JSChaCha20 = function (key, nonce, counter) {\n  if (typeof counter === 'undefined') {\n    counter = 0\n  }\n\n  if (!(key instanceof Uint8Array) || key.length !== 32) {\n    throw new Error('Key should be 32 byte array!')\n  }\n\n  if (!(nonce instanceof Uint8Array) || nonce.length !== 12) {\n    throw new Error('Nonce should be 12 byte array!')\n  }\n\n  this._rounds = 20\n  // Constants\n  this._sigma = [0x61707865, 0x3320646e, 0x79622d32, 0x6b206574]\n\n  // param construction\n  this._param = [\n    this._sigma[0],\n    this._sigma[1],\n    this._sigma[2],\n    this._sigma[3],\n    // key\n    this._get32(key, 0),\n    this._get32(key, 4),\n    this._get32(key, 8),\n    this._get32(key, 12),\n    this._get32(key, 16),\n    this._get32(key, 20),\n    this._get32(key, 24),\n    this._get32(key, 28),\n    // counter\n    counter,\n    // nonce\n    this._get32(nonce, 0),\n    this._get32(nonce, 4),\n    this._get32(nonce, 8)\n  ]\n\n  // init 64 byte keystream block //\n  this._keystream = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n  ]\n\n  // internal byte counter //\n  this._byteCounter = 0\n}\n\nJSChaCha20.prototype._chacha = function () {\n  var mix = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  var i = 0\n  var b = 0\n\n  // copy param array to mix //\n  for (i = 0; i < 16; i++) {\n    mix[i] = this._param[i]\n  }\n\n  // mix rounds //\n  for (i = 0; i < this._rounds; i += 2) {\n    this._quarterround(mix, 0, 4, 8, 12)\n    this._quarterround(mix, 1, 5, 9, 13)\n    this._quarterround(mix, 2, 6, 10, 14)\n    this._quarterround(mix, 3, 7, 11, 15)\n\n    this._quarterround(mix, 0, 5, 10, 15)\n    this._quarterround(mix, 1, 6, 11, 12)\n    this._quarterround(mix, 2, 7, 8, 13)\n    this._quarterround(mix, 3, 4, 9, 14)\n  }\n\n  for (i = 0; i < 16; i++) {\n    // add\n    mix[i] += this._param[i]\n\n    // store keystream\n    this._keystream[b++] = mix[i] & 0xFF\n    this._keystream[b++] = (mix[i] >>> 8) & 0xFF\n    this._keystream[b++] = (mix[i] >>> 16) & 0xFF\n    this._keystream[b++] = (mix[i] >>> 24) & 0xFF\n  }\n}\n\n/**\n * The basic operation of the ChaCha algorithm is the quarter round.\n * It operates on four 32-bit unsigned integers, denoted a, b, c, and d.\n *\n * @param {Array} output\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @private\n */\nJSChaCha20.prototype._quarterround = function (output, a, b, c, d) {\n  output[d] = this._rotl(output[d] ^ (output[a] += output[b]), 16)\n  output[b] = this._rotl(output[b] ^ (output[c] += output[d]), 12)\n  output[d] = this._rotl(output[d] ^ (output[a] += output[b]), 8)\n  output[b] = this._rotl(output[b] ^ (output[c] += output[d]), 7)\n\n  // JavaScript hack to make UINT32 :) //\n  output[a] >>>= 0\n  output[b] >>>= 0\n  output[c] >>>= 0\n  output[d] >>>= 0\n}\n\n/**\n * Little-endian to uint 32 bytes\n *\n * @param {Uint8Array|[number]} data\n * @param {number} index\n * @return {number}\n * @private\n */\nJSChaCha20.prototype._get32 = function (data, index) {\n  return data[index++] ^ (data[index++] << 8) ^ (data[index++] << 16) ^ (data[index] << 24)\n}\n\n/**\n * Cyclic left rotation\n *\n * @param {number} data\n * @param {number} shift\n * @return {number}\n * @private\n */\nJSChaCha20.prototype._rotl = function (data, shift) {\n  return ((data << shift) | (data >>> (32 - shift)))\n}\n\n/**\n *  Encrypt data with key and nonce\n *\n * @param {Uint8Array} data\n * @return {Uint8Array}\n */\nJSChaCha20.prototype.encrypt = function (data) {\n  return this._update(data)\n}\n\n/**\n *  Decrypt data with key and nonce\n *\n * @param {Uint8Array} data\n * @return {Uint8Array}\n */\nJSChaCha20.prototype.decrypt = function (data) {\n  return this._update(data)\n}\n\n/**\n *  Encrypt or Decrypt data with key and nonce\n *\n * @param {Uint8Array} data\n * @return {Uint8Array}\n * @private\n */\nJSChaCha20.prototype._update = function (data) {\n  if (!(data instanceof Uint8Array) || data.length === 0) {\n    throw new Error('Data should be type of bytes (Uint8Array) and not empty!')\n  }\n\n  var output = new Uint8Array(data.length)\n\n  // core function, build block and xor with input data //\n  for (var i = 0; i < data.length; i++) {\n    if (this._byteCounter === 0 || this._byteCounter === 64) {\n      // generate new block //\n\n      this._chacha()\n      // counter increment //\n      this._param[12]++\n\n      // reset internal counter //\n      this._byteCounter = 0\n    }\n\n    output[i] = data[i] ^ this._keystream[this._byteCounter++]\n  }\n\n  return output\n}\n\n// EXPORT //\nif (typeof module !== 'undefined' && module.exports) {\n  module.exports = JSChaCha20\n}\n"]}